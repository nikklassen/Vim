set nocompatible

let g:python_host_prog = '/usr/bin/python'
let g:python3_host_prog = '/usr/bin/python3'

let g:PLUGINS_FILE = expand('~/.vim/plugins.vim')
exec "source " . g:PLUGINS_FILE

let g:ABBREV_FILE = expand('~/.vim/abbrev.vim')
exec "source " . g:ABBREV_FILE

if &term =~ '256color'
    " https://sunaku.github.io/vim-256color-bce.html
    set t_ut=
endif

" Better command-line completion
set wildmode=list:longest,full

let &wildignore = "*.o,*.pyc,*.hi"

" Completion settings
set completeopt=menu,longest

" Show partial commands in the last line of the screen
set showcmd
" Search commands

set hlsearch
set ignorecase
set smartcase

set smartindent

" Stop certain movements from always going to the first character of a line.
" While this behaviour deviates from that of Vi, it does what most users
" coming from other editors would expect.
set nostartofline

" Instead of failing a command because of unsaved changes, instead raise a
" dialogue asking if you wish to save changed files.
set confirm

" Set the command window height to 2 lines, to avoid many cases of having to
" "press <Enter> to continue"
set cmdheight=2

" Display line numbers on the left
set relativenumber

" Shorter timeout for escape keys
set tm=250

" conceal in insert (i), normal (n) and visual (v) modes
set concealcursor=n
" hide concealed text completely unless replacement character is defined
set conceallevel=2

set path=.,/usr/include,,

set hidden

set list

set mouse=a

"------------------------------------------------------------
" Indentation options
"------------------------------------------------------------
set shiftwidth=4
set softtabstop=4
set tabstop=2

set expandtab
set shiftround
set nojoinspaces

"------------------------------------------------------------
" Custom commands
"------------------------------------------------------------

" read the output of a shell command into a new scratch buffer
command! -nargs=* -complete=shellcmd R new | setlocal buftype=nofile bufhidden=hide noswapfile | r !<args>

"------------------------------------------------------------
" View Settings
"------------------------------------------------------------

function! PersistViewForFile()
    return expand('%:t') != "" && expand('%:p') !~ '^fugitive://'
endfunction

function! SaveViewSettings()
    if PersistViewForFile()
        mkview!
    endif
endfunction

function! LoadViewSettings()
    if PersistViewForFile()
        silent loadview
    endif
endfunction

if !has('nvim')
    au BufWinLeave * call SaveViewSettings()
    au BufWinEnter * call LoadViewSettings()

    " Hold onto marks for the last ten files
    set viminfo='10
else
    " Jump to the last position on load
    au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
endif

"------------------------------------------------------------
" Colour settings
"------------------------------------------------------------

hi Pmenu ctermbg=Blue
hi clear Conceal

set background=dark
let g:rehash256 = 1
colorscheme molokai

function! GitSL()
    if !exists('fugitive#head')
        return ''
    endif

    let head = fugitive#head()
    if head != ''
        return ' @ ' . head
    endif
    return ''
endfunction

set statusline=                          " clear the statusline for when vimrc is reloaded
set statusline+=[%n]\                    " buffer number
set statusline+=%<%.99f                  " file name
set statusline+=%{GitSL()}\ 
set statusline+=%h%m%r%w%q               " flags
set statusline+=%=                       " right align
set statusline+=%y\                      " file type
set statusline+=%-8(\ %l,%c\ %)          " offset

" Keep the quickfix window small when there aren't many lines
au FileType qf call AdjustWindowHeight(3, 10)
function! AdjustWindowHeight(minheight, maxheight)
  exe max([min([line("$"), a:maxheight]), a:minheight]) . "wincmd _"
endfunction

"------------------------------------------------------------
" File type specific settings
"------------------------------------------------------------

let g:tex_flavor='latex'

au BufRead,BufNewFile *.thor setf ruby

au BufNewFile,BufReadPost *.log set filetype=log

au BufWritePost .vimrc source $MYVIMRC

au filetype quickfix exe "3wincmd _"

"------------------------------------------------------------
" Plug-in settings
"------------------------------------------------------------

if exists( "vsvim_useeditordefaults" )
    set vsvim_useeditordefaults
endif

if has('nvim') && $XDG_CONFIG_HOME != ''
    source $XDG_CONFIG_HOME/nvim/nvim.vim
endif

let local_vimrc = expand('~/.vimrc.local')
if filereadable(local_vimrc)
    exec "source " . local_vimrc
endif

for plugin in g:plugs_order
  let fn = expand('~/.vim/plugin-config/' . plugin)
  if fn !~ "\.vim$"
    let fn .= ".vim"
  endif
  if filereadable(fn)
    exec "source " . fn
  endif
endfor

