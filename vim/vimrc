set nocompatible

execute pathogen#infect()
call pathogen#helptags()

filetype indent plugin on

" Enable syntax highlighting
syntax enable

" Better command-line completion
set wildmenu

" Completion settings
au CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif
set completeopt=menu,longest

" Show partial commands in the last line of the screen
set showcmd
" Search commands

set hlsearch
set incsearch
set ignorecase
set smartcase

" Allow backspacing over autoindent, line breaks and start of insert action
set backspace=indent,eol,start

" When opening a new line and no filetype-specific indenting is enabled, keep
" the same indent as the line you're currently on. Useful for READMEs, etc.
set autoindent

set smartindent

" Stop certain movements from always going to the first character of a line.
" While this behaviour deviates from that of Vi, it does what most users
" coming from other editors would expect.
set nostartofline

" Always display the status line, even if only one window is displayed
set laststatus=2

" Instead of failing a command because of unsaved changes, instead raise a
" dialogue asking if you wish to save changed files.
set confirm

" Set the command window height to 2 lines, to avoid many cases of having to
" "press <Enter> to continue"
set cmdheight=2

" Display line numbers on the left
set number

" Shorter timeout for escape keys
set tm=250

" conceal in insert (i), normal (n) and visual (v) modes
set concealcursor=inv
" hide concealed text completely unless replacement character is defined
set conceallevel=2

" Tell Vim not to highlight matching parentheses
let loaded_matchparen = 1

"------------------------------------------------------------
" Indentation options
"------------------------------------------------------------
set shiftwidth=4
set softtabstop=4
set tabstop=2

set expandtab
set smarttab
set shiftround
set nojoinspaces

"------------------------------------------------------------
" Mappings 
"------------------------------------------------------------

map Y y$

" Map <C-L> (redraw screen) to also turn off search highlighting until the
" next search
nnoremap <C-L>      :nohl<CR><C-L>

nmap \<CR>   mrO<ESC>`r
imap \<CR>   <ESC>o

" Reindent whole file
nmap \=      mrgg=G`r

" Replace word under cursor with last yanked
nmap <leader>r      viw"0p

nnoremap <space>    za

vnoremap <          <gv
vnoremap <leader><  <

vnoremap >          >gv
vnoremap <leader>>  >

nnoremap <Left>     gT
nnoremap <Right>    gt
nnoremap <Up>       :lpr<CR>
nnoremap <Down>     :lne<CR>

nmap \v      :tabe $MYVIMRC<CR>
nnoremap \o  :CommandT<CR> 

" Move lines
nnoremap <C-J> ddp
nnoremap <C-K> ddkP

set pastetoggle=<F12>

" build
nmap \m :w \| make<CR>

function! ExtendedHome()
    let column = col('.')
    normal! ^
    if column == col('.')
        normal! 0
    endif
endfunction

" Smart home
noremap <silent> [1~ :call ExtendedHome()<CR>

" 'Home' and 'End' for insert mode
inoremap <silent> ,a <C-O>:call ExtendedHome()<CR>
inoremap ,e <C-O>A

noremap <leader>c :cd <C-R>=expand('%:p:h')<CR><CR>

"------------------------------------------------------------
" View Settings
"------------------------------------------------------------

function! SaveViewSettings()
    if expand('%:t') != ""
        mkview!
    endif
endfunction

function! LoadViewSettings()
    if expand('%:t') != ""
        silent loadview
    endif
endfunction

au BufWinLeave * call SaveViewSettings()
au BufWinEnter * call LoadViewSettings()

" Hold onto marks for the last ten files
set viminfo='10

"------------------------------------------------------------
" Colour settings
"------------------------------------------------------------

hi Pmenu ctermbg=Blue
hi clear Conceal

function! SetColourScheme()
    if strftime("%H") > 8 && strftime("%H") < 21
        set background=light
        colorscheme solarized
    else
        set background=dark
        colorscheme molokai
    endif
endfunction

call SetColourScheme()

"------------------------------------------------------------
" File type specific settings
"------------------------------------------------------------

let g:tex_flavor='latex'

au BufRead,BufNewFile *.thor setf ruby

function! RunRuby()
    wa
    !ruby %
endfunction

" Run ruby with <A-R>
au BufRead,BufNewFile *.rb nmap Â® :call RunRuby()<CR>
au BufRead,BufNewFile *.rb set tags+=tags,~/.rbenv/versions/2.0.0-p195/tags

au BufRead,BufNewFile *.asm set syntax=mips
au BufRead,BufNewFile *.wlpp set syntax=cpp

set tags+=~/.vim/tags/cpp/tags,~/.vim/tags/gtest/tags

au BufWritePost .vimrc source $MYVIMRC

" Switch back and for between .h and .cpp
function! SwitchCpp()
    let filename = expand("%")
    if match(filename, "\.h$") != -1
        let filename = substitute(filename, "\.h$", "\.cpp", "")
    elseif match(filename, "\.cpp$") != -1
        let filename = substitute(filename, "\.cpp$", "\.h", "")
    else
        return
    endif

    execute 'edit ' . fnameescape(filename)
endfunction

au BufRead,BufNewFile *.cpp,*.h nnoremap <leader>c :call SwitchCpp()<CR>

"------------------------------------------------------------
" Plug-in settings
"------------------------------------------------------------

if exists( "vsvim_useeditordefaults" )
    set vsvim_useeditordefaults
endif

let g:EasyMotion_leader_key = '<leader>'
let g:EasyMotion_mapping_n = "<leader>x"

let g:localvimrc_sandbox=0
let g:localvimrc_ask=0
let g:localvimrc_reverse=1

let g:qcc_format_menu = '${0}'
au BufRead /tmp/mutt* setlocal omnifunc=QueryCommandComplete

hi link EasyMotionTarget ErrorMsg
hi link EasyMotionShade  Comment

" Syntastic
let g:syntastic_mode_map = { 'passive_filetypes': ['tex']}
let g:syntastic_auto_loc_list = 1

let g:syntastic_cpp_checkers = ['clang']
let g:syntastic_cpp_clang_args = "-std=c++11 -isystem ~/Programming/C++/gtest/include"

let g:syntastic_haskell_checkers = ['ghc_mod', 'hlint']

let g:syntastic_javascript_checkers = ['jshint']

let g:syntastic_check_on_wq = 0
let g:syntastic_ignore_files = ['\.h$']

" Command-T
nnoremap <silent> <leader>o :CommandT<CR>
let g:CommandTWildIgnore=&wildignore . ",node_modules/*"

" Clang_complete
let g:clang_use_library = 1
let g:clang_library_path = "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib"
let g:clang_auto_select = 1
let g:clang_user_options='|| exit 0'
let g:clang_debug = 1
let g:clang_complete_auto = 1

let g:clang_close_preview = 1

let g:clang_snippets = 1
let g:clang_trailing_placeholder = 1

" SuperTab
let g:SuperTabLongestHighlight = 1
let g:SuperTabDefaultCompletionType = "context"

" Vim2HS
let g:haskell_conceal_wide = 1

" vim-latex
let g:tex_indent_brace=0
let g:tex_indent_items=0
let g:tex_conceal=""
imap <C-l> <Plug>IMAP_JumpForward
noremap <leader>q <Plug>Tex_InsertItemOnThisLine
